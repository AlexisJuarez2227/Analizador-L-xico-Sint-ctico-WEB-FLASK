
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftASIGNARSUMARESTAleftMULTDIVrightUMINUSIDENTIFICADOR ENTERO ASIGNAR SUMA RESTA MULT DIV POTENCIA MODULO AND OR NOT MENORQUE MENORIGUAL MAYORQUE MAYORIGUAL IGUAL DISTINTO NUMERAL PARIZQ PARDER CORIZQ CORDER LLAIZQ LLADER PUNTOCOMA COMDOB MAYORDER MAYORIZQ INCLUDE USING NAMESPACE COUT CINexpresion : NUMERAL INCLUDE MENORQUE expresion MAYORQUEdeclaracion : USING NAMESPACE expresion PUNTOCOMAexpresion : COUT MAYORIZQ expresion PUNTOCOMAdeclaracion : CIN MAYORDER expresion PUNTOCOMAdeclaracion : IDENTIFICADOR ASIGNAR expresion PUNTOCOMAdeclaracion : expresion\n    expresion  :   expresion SUMA expresion\n                |   expresion RESTA expresion\n                |   expresion MULT expresion\n                |   expresion DIV expresion\n                |   expresion POTENCIA expresion\n                |   expresion MODULO expresion\n\n    expresion : RESTA expresion %prec UMINUS\n    expresion  : PARIZQ expresion PARDER\n                | LLAIZQ expresion LLADER\n                | CORIZQ expresion CORDER\n    expresion : ENTEROexpresion : COMDOB expresion COMDOBexpresion : IDENTIFICADOR'
    
_lr_action_items = {'COUT':([0,2,3,4,7,9,11,15,16,17,18,19,20,35,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'SUMA':([5,6,8,12,13,14,21,22,24,25,26,27,28,29,30,31,32,33,34,36,37,38,],[17,-17,-19,17,17,17,17,-13,17,-16,-18,-14,-9,-10,-7,17,-8,17,-15,-3,17,-1,]),'INCLUDE':([10,],[23,]),'PARDER':([6,8,14,22,25,26,27,28,29,30,31,32,33,34,36,38,],[-17,-19,27,-13,-16,-18,-14,-9,-10,-7,-11,-8,-12,-15,-3,-1,]),'CORDER':([6,8,12,22,25,26,27,28,29,30,31,32,33,34,36,38,],[-17,-19,25,-13,-16,-18,-14,-9,-10,-7,-11,-8,-12,-15,-3,-1,]),'CORIZQ':([0,2,3,4,7,9,11,15,16,17,18,19,20,35,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'MULT':([5,6,8,12,13,14,21,22,24,25,26,27,28,29,30,31,32,33,34,36,37,38,],[15,-17,-19,15,15,15,15,-13,15,-16,-18,-14,-9,-10,15,15,15,15,-15,-3,15,-1,]),'IDENTIFICADOR':([0,2,3,4,7,9,11,15,16,17,18,19,20,35,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'COMDOB':([0,2,3,4,6,7,8,9,11,13,15,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,38,],[3,3,3,3,-17,3,-19,3,3,26,3,3,3,3,3,3,-13,-16,-18,-14,-9,-10,-7,-11,-8,-12,-15,3,-3,-1,]),'MAYORQUE':([6,8,22,25,26,27,28,29,30,31,32,33,34,36,37,38,],[-17,-19,-13,-16,-18,-14,-9,-10,-7,-11,-8,-12,-15,-3,38,-1,]),'DIV':([5,6,8,12,13,14,21,22,24,25,26,27,28,29,30,31,32,33,34,36,37,38,],[16,-17,-19,16,16,16,16,-13,16,-16,-18,-14,-9,-10,16,16,16,16,-15,-3,16,-1,]),'$end':([5,6,8,22,25,26,27,28,29,30,31,32,33,34,36,38,],[0,-17,-19,-13,-16,-18,-14,-9,-10,-7,-11,-8,-12,-15,-3,-1,]),'MODULO':([5,6,8,12,13,14,21,22,24,25,26,27,28,29,30,31,32,33,34,36,37,38,],[20,-17,-19,20,20,20,20,-13,20,-16,-18,-14,-9,-10,-7,20,-8,20,-15,-3,20,-1,]),'LLADER':([6,8,21,22,25,26,27,28,29,30,31,32,33,34,36,38,],[-17,-19,34,-13,-16,-18,-14,-9,-10,-7,-11,-8,-12,-15,-3,-1,]),'PARIZQ':([0,2,3,4,7,9,11,15,16,17,18,19,20,35,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'LLAIZQ':([0,2,3,4,7,9,11,15,16,17,18,19,20,35,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'ENTERO':([0,2,3,4,7,9,11,15,16,17,18,19,20,35,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'PUNTOCOMA':([6,8,22,24,25,26,27,28,29,30,31,32,33,34,36,38,],[-17,-19,-13,36,-16,-18,-14,-9,-10,-7,-11,-8,-12,-15,-3,-1,]),'POTENCIA':([5,6,8,12,13,14,21,22,24,25,26,27,28,29,30,31,32,33,34,36,37,38,],[18,-17,-19,18,18,18,18,-13,18,-16,-18,-14,-9,-10,-7,18,-8,18,-15,-3,18,-1,]),'MENORQUE':([23,],[35,]),'MAYORIZQ':([1,],[11,]),'RESTA':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,],[9,9,9,9,19,-17,9,-19,9,9,19,19,19,9,9,9,9,9,9,19,-13,19,-16,-18,-14,-9,-10,-7,19,-8,19,-15,9,-3,19,-1,]),'NUMERAL':([0,2,3,4,7,9,11,15,16,17,18,19,20,35,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expresion':([0,2,3,4,7,9,11,15,16,17,18,19,20,35,],[5,12,13,14,21,22,24,28,29,30,31,32,33,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expresion","S'",1,None,None,None),
  ('expresion -> NUMERAL INCLUDE MENORQUE expresion MAYORQUE','expresion',5,'p_declaracion_librerias','analizador_sintactico.py',12),
  ('declaracion -> USING NAMESPACE expresion PUNTOCOMA','declaracion',4,'p_declaracion_encabezado','analizador_sintactico.py',17),
  ('expresion -> COUT MAYORIZQ expresion PUNTOCOMA','expresion',4,'p_declaracion_imprimir','analizador_sintactico.py',21),
  ('declaracion -> CIN MAYORDER expresion PUNTOCOMA','declaracion',4,'p_declaracion_asigna','analizador_sintactico.py',26),
  ('declaracion -> IDENTIFICADOR ASIGNAR expresion PUNTOCOMA','declaracion',4,'p_declaracion_asignar','analizador_sintactico.py',31),
  ('declaracion -> expresion','declaracion',1,'p_declaracion_expr','analizador_sintactico.py',35),
  ('expresion -> expresion SUMA expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',40),
  ('expresion -> expresion RESTA expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',41),
  ('expresion -> expresion MULT expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',42),
  ('expresion -> expresion DIV expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',43),
  ('expresion -> expresion POTENCIA expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',44),
  ('expresion -> expresion MODULO expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',45),
  ('expresion -> RESTA expresion','expresion',2,'p_expresion_uminus','analizador_sintactico.py',66),
  ('expresion -> PARIZQ expresion PARDER','expresion',3,'p_expresion_grupo','analizador_sintactico.py',71),
  ('expresion -> LLAIZQ expresion LLADER','expresion',3,'p_expresion_grupo','analizador_sintactico.py',72),
  ('expresion -> CORIZQ expresion CORDER','expresion',3,'p_expresion_grupo','analizador_sintactico.py',73),
  ('expresion -> ENTERO','expresion',1,'p_expresion_numero','analizador_sintactico.py',78),
  ('expresion -> COMDOB expresion COMDOB','expresion',3,'p_expresion_cadena','analizador_sintactico.py',82),
  ('expresion -> IDENTIFICADOR','expresion',1,'p_expresion_nombre','analizador_sintactico.py',86),
]
